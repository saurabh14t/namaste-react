Chapter 1:-->

1. We will writer React.createElement("h1", {id:"heading"},"Namaste React"); (React Element is an Object)
   1st is header or tag we want to use
   2nd is attribute of that tag
   3rd is children
2. When we render this element to DOM it becomes HTML

Chapter 2:-->
package.json is a configuration file for package manager.
Bundler (webpack, parcel, veet) bundles the app so that it can be shipped to production
2 type of dependency. dev dependency and another is normal dependency
dev dependeny is required in development. Normal dependency is required in production also.
parcel is a beast
transitive dependency
^ carat before version means if new minor version parcel will automatically upgrade its version
if I have put tilde(~) if new major version parcel will automatically upgrade its version
package.json keep the version our dependencies. (not exact version)
package-lock.json - keep a track of exact version node package it has been installed.
integrity in the package-lock.json is hashed version which check whatever version we have used/installed in local same is used in production.
if we have package.json and package-lock.json we can recreate our node modules.
we don't required to add node modules in the git as we can recreate it will npm install.
gitignore file we keep the file that we don't want to deploy in git
npx - executing a package
cdn link is not the preferred way to install react
parcel -
Dev Build., Local Server, Hot Module Replacement (HMR). File watching Algoritm (written in C++), Caching for faster builds
image optimization, Minification, Bundling, Compress the file, consistent hashing, code splitting, Differential bundling - to support older browser, diagnstic, Error handling, host a env in https, Tree Shaking algorith - remove unused code, Different build for dev and prod, for prod build - npx parcel build index.html

Chapter 3:-->

1. npm run start and npm start is same. In the backend it will call npx parcel index.html
2. JSX is not HTML in Javascript. JSX is html-like sysntax. JSX is an element.
3. JSX is transpiled before it reache before it reaches the JS. It is done by Parcel. It gives it to Babel. Babel transpiles --> React.createElement --> JS Object --> HTML Element (render)
4. If we have to give attribute to JSX we have to use Camel Case (For eg - className instead of class in HTML)
5. (Homework) Various tag of html in JSX?
6. If our code is more than 1 line we have to wrap our code with bracket. This is required for babel to understand from where it starts and where it ends.
7. Components --> Class Based Components (Old Way) & Functional Components (New Way)
8. Functional component is a normal javascript function which return some JSX code.
9. If we use curly branket inside jsx we can use any javscript expression inside it.
10. JSX take care of attack (Cross site scripting)
11. We can call a component inside another component by usoing curly braces by calling tha function for eg = {Title()}

Chapter 4:-->

1. props (property) are like just normal arguments to the functions.
2. props is an Object.
3. Json Viewer Chrome extention
4. Config Driven UI (Controlling the UI using the config.)
5. React says that they don't recomment using index as a key while looping through as it will negative impact the performance.
   -- https://robinpokorny.com/blog/index-as-a-key-is-an-anti-pattern/

Chapter 5:-->
2 types of export/import
Named Export - export --> export name of variableorcomponent
import --> inport {variableorcomponent} from 'pathofcomponent'

Default export - export --> export default nameofvariableorcomponents
import --> import nameofvariableorcomponents from 'pathofcomponent'

can we do default and named export for same variable?

Hooks:-
Normal JS Functions
-- useState() - state variable in React
-- useEffect()

React is fast because it is doing Efficient DOM manipulation.

whenever state variables changes in React it re renders the components.

When we are calling the 2nd valu in usestate it will check the difference and re-renders the components.

React Alrorithm -> Reconciliation algorithm (React Fiber) -- (React 16) - New way to finding the diff and updating the node.
acdlite github link for react fiber -- https://github.com/acdlite/react-fiber-architecture

from 7 card --> UI changes to 3 card  
React creat a Obect for an component.
Actual DOM of different tag (Normal JS Object)

- react create a Virtual DOM
  Virtual DOM Representation of Actual DOM.

Diff Algorithm: --> Finds out the different between updated Virtual DOM and previous Virtual DOM.
It will find the difference and then update the actual DOM.

Chapter 6:-->
MonoLith Architecture and MicroService Architecture
MonoLith Architecture -- All the things where written in one single large Project.
MicroService Architecture -- We have different service for doing each job. All these combined together form a big app.
it follows Single responsibility principle. These are called seperation of concerns. No service is interfering with each other.

As soon the page load we can fetch the data and make the API call.-->

1. Loads --> API call --> Render
2. Loads --> Render --> API call --> re-render the UI with the data (In react we will use this approach. This will give bteer approach)

In React first body component is called. Then useEffect is called.

Browser is not allowing us to call API outside of same origin i.e from one origin to another origin.

Shimmer UI

When react re-renders it renders a component again.

whenever state variable update, React triggers a reconciliation cycle (re renders a component)

React Fiber is a new reconciliation process to effecientely manipulate the DOM.

Chapter 7:-->
Without the dependency array useEffect is called everytime my components renders.
When dependency array the behaviour changes.
When the dependency array is empty then useEffect is called on only once in the initial render.
When we put anything in an dependency array then it will be called only called after everytime that value is updated.(for eg btnName)

useState is always called inside functional compenents.
Should call at the start.
We should not call useState inside if-else, for loop, inside a function. This will create inconsistencies inside the code

We should never use anchor tag in React because it refresh whole page.

2 types of Routing in web apps

1. Client Side routing - Not make any network call when going to different page.
2. Server Side routing - Make a network call and page is coming from server.

Class Based Components:-
-- Never update state variables directly in class based components.
-- If there are many state variable inside a this.state and if we are updating state value of only one using this.setState Object it will update only that variable and React will not update other variables.
-- Reconciliation process is same as when state is updated react will rerender the component as per the diff algoithm.
-- Instance of class is created when class based component is called.
-- First thing that happens when class is called is contructor function is called.
-- Then render is called.
-- If there are Parent COmpoenent and from there Child Compoenent is called inside it the called happens as below
Parent Component --> Parent Render --> Child Constructor --> Child Render --> Child componentDidMount -->
Parent componentDidMount

-- Parent componentDidMount will be mounted after all the child has been mounted.
-- When a Child component is called from Parent it triggers the lifecycle method of child again.

Life Cycle of Class based components:-
Diagram :- https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/
Render Phase --> Constructor() is called
Render() is called -- This will be called for parent and child component at same time.

Commit Phase --> DOM manipulation happens -- This phase is very expensive so even if have multiple child all Render phase methods  
 are called (COnstructor() and Render()) befor compoentDidMount() phase.

                 componentDidMount() is called

Mounting Lifecycle:-
Constructor (with Dummy data)
Render (with Dummy data)

<HTML Dummy>
componentDidMount is called
<API Call>
<this.setState> - state varaible is updated

When setState is called update cycle begins
Render Method is called and happens with API data.

<html> is loaded with new API data

      compoentDidUpdate() method is called.


      ComponentWillUnmount() -> Called when we change the page
      When we are changing our component  the call inside a componentdidmount() for eg - setinterval then it will call that setinterval in another compoent also. And again if we go to 1st component it create new setinterval and add it to current setinterval time and print. We have to kill it is componentWillUnmount()

      useEffect(() =>{
        setInterval(() =>{
                console.log("SetInterval Called);
        },1000)

        //TO clear it we will call a return. Called when we are unmounting it
        return () => {

        }
      })


      Different ways to add CSS:-
      1. Write it inside the .css file
      2. Using SASS and SCSS file
      3. Using Styled-Component
      4. Using Different Libraries (Material UI, Bootstrap, Ant UI, Chakra)
      5. Tailwind CSS

Higher Order Compoenents - Takes a component or a function as a input and return new component with enhanced functionality.

Controlled Components - parent is controlling child
Uncontrolled Components - child has controlling child

Lifting the state is react --> https://react.dev/learn/sharing-state-between-components

Props Drilling --> Passing the props from parent to child and multiple child.
Using React Context

React Redux (Redux ToolKit)

Architecture RTK :-

Redux Store is a big Javascript Object and Kept in global central place.
We have slices (Logical Partition) in Redux Store where we keep small portion of Redux store. eg - (Theme Slice, Cart Slice (All data of cart), User Slice etc).

For Write Data :--> When we click on any Add Button. It dispatches an Action --> Calls a (Reducer) Function --> It modifies the Slice of the redux store like cart (Cart Slice) --> Cart(Data) will be updated
What is a function -- (It is known as a Reducer function)

For Read Data :--> We use Selector to read the data from our store and this selector will modify our React components. This phenomenon is known as subcribing to the store. (If data in store changes React component data also changes/modify) for eg - Header component is subcribed to the store. (This is done using Selector)

#Redux ToolKit

1. Install Libraries (@reduxjs/toolkit, react-redux)
2. Build our Store
3. Connect our store to our App
4. Slice (cart Slice)
5. Dispatch Action
6. Selector

RTK Query :-->
// In the previous version of Redux for giving the API call and storeing it in the store we used to have Redux thunk Middleware
In Redux Toolk Kit we have RTK Query
-- https://redux-toolkit.js.org/tutorials/rtk-query
